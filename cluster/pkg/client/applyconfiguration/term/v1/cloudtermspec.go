/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	termv1 "cluster/api/term/v1"
)

// CloudTermSpecApplyConfiguration represents a declarative configuration of the CloudTermSpec type for use
// with apply.
type CloudTermSpecApplyConfiguration struct {
	Replicas      *int32                        `json:"replicas,omitempty"`
	Property      *string                       `json:"property,omitempty"`
	Containers    []ContainerApplyConfiguration `json:"containers,omitempty"`
	Networks      []*termv1.Network             `json:"networks,omitempty"`
	PodSpecConfig *string                       `json:"podSpecConfig,omitempty"`
}

// CloudTermSpecApplyConfiguration constructs a declarative configuration of the CloudTermSpec type for use with
// apply.
func CloudTermSpec() *CloudTermSpecApplyConfiguration {
	return &CloudTermSpecApplyConfiguration{}
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *CloudTermSpecApplyConfiguration) WithReplicas(value int32) *CloudTermSpecApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithProperty sets the Property field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Property field is set to the value of the last call.
func (b *CloudTermSpecApplyConfiguration) WithProperty(value string) *CloudTermSpecApplyConfiguration {
	b.Property = &value
	return b
}

// WithContainers adds the given value to the Containers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Containers field.
func (b *CloudTermSpecApplyConfiguration) WithContainers(values ...*ContainerApplyConfiguration) *CloudTermSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithContainers")
		}
		b.Containers = append(b.Containers, *values[i])
	}
	return b
}

// WithNetworks adds the given value to the Networks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Networks field.
func (b *CloudTermSpecApplyConfiguration) WithNetworks(values ...**termv1.Network) *CloudTermSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworks")
		}
		b.Networks = append(b.Networks, *values[i])
	}
	return b
}

// WithPodSpecConfig sets the PodSpecConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSpecConfig field is set to the value of the last call.
func (b *CloudTermSpecApplyConfiguration) WithPodSpecConfig(value string) *CloudTermSpecApplyConfiguration {
	b.PodSpecConfig = &value
	return b
}
