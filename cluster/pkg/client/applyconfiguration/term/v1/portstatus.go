/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	termv1 "cluster/api/term/v1"
)

// PortStatusApplyConfiguration represents a declarative configuration of the PortStatus type for use
// with apply.
type PortStatusApplyConfiguration struct {
	NetworkID      *string           `json:"network_id,omitempty"`
	FixedIPs       []*termv1.FixedIP `json:"fixed_ips,omitempty"`
	SecurityGroups []string          `json:"security_groups,omitempty"`
	ID             *string           `json:"id,omitempty"`
	AdminStateUp   *bool             `json:"admin_state_up,omitempty"`
	Status         *string           `json:"status,omitempty"`
	MacAddress     *string           `json:"mac_address,omitempty"`
	TenantID       *string           `json:"tenant_id,omitempty"`
	ProjectID      *string           `json:"project_id,omitempty"`
	PortID         *string           `json:"portId,omitempty"`
	PortReady      *bool             `json:"PortReady,omitempty"`
	Ifname         *string           `json:"ifname,omitempty"`
	Nicname        *string           `json:"nicname,omitempty"`
	Ifaceid        *string           `json:"ifaceid,omitempty"`
	Interface      *string           `json:"interface,omitempty"`
	DeviceReady    *bool             `json:"deviceReady,omitempty"`
	VifType        *string           `json:"vif_type,omitempty"`
}

// PortStatusApplyConfiguration constructs a declarative configuration of the PortStatus type for use with
// apply.
func PortStatus() *PortStatusApplyConfiguration {
	return &PortStatusApplyConfiguration{}
}

// WithNetworkID sets the NetworkID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkID field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithNetworkID(value string) *PortStatusApplyConfiguration {
	b.NetworkID = &value
	return b
}

// WithFixedIPs adds the given value to the FixedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FixedIPs field.
func (b *PortStatusApplyConfiguration) WithFixedIPs(values ...**termv1.FixedIP) *PortStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFixedIPs")
		}
		b.FixedIPs = append(b.FixedIPs, *values[i])
	}
	return b
}

// WithSecurityGroups adds the given value to the SecurityGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecurityGroups field.
func (b *PortStatusApplyConfiguration) WithSecurityGroups(values ...string) *PortStatusApplyConfiguration {
	for i := range values {
		b.SecurityGroups = append(b.SecurityGroups, values[i])
	}
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithID(value string) *PortStatusApplyConfiguration {
	b.ID = &value
	return b
}

// WithAdminStateUp sets the AdminStateUp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminStateUp field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithAdminStateUp(value bool) *PortStatusApplyConfiguration {
	b.AdminStateUp = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithStatus(value string) *PortStatusApplyConfiguration {
	b.Status = &value
	return b
}

// WithMacAddress sets the MacAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MacAddress field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithMacAddress(value string) *PortStatusApplyConfiguration {
	b.MacAddress = &value
	return b
}

// WithTenantID sets the TenantID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TenantID field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithTenantID(value string) *PortStatusApplyConfiguration {
	b.TenantID = &value
	return b
}

// WithProjectID sets the ProjectID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProjectID field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithProjectID(value string) *PortStatusApplyConfiguration {
	b.ProjectID = &value
	return b
}

// WithPortID sets the PortID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortID field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithPortID(value string) *PortStatusApplyConfiguration {
	b.PortID = &value
	return b
}

// WithPortReady sets the PortReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortReady field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithPortReady(value bool) *PortStatusApplyConfiguration {
	b.PortReady = &value
	return b
}

// WithIfname sets the Ifname field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ifname field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithIfname(value string) *PortStatusApplyConfiguration {
	b.Ifname = &value
	return b
}

// WithNicname sets the Nicname field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Nicname field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithNicname(value string) *PortStatusApplyConfiguration {
	b.Nicname = &value
	return b
}

// WithIfaceid sets the Ifaceid field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ifaceid field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithIfaceid(value string) *PortStatusApplyConfiguration {
	b.Ifaceid = &value
	return b
}

// WithInterface sets the Interface field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interface field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithInterface(value string) *PortStatusApplyConfiguration {
	b.Interface = &value
	return b
}

// WithDeviceReady sets the DeviceReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeviceReady field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithDeviceReady(value bool) *PortStatusApplyConfiguration {
	b.DeviceReady = &value
	return b
}

// WithVifType sets the VifType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VifType field is set to the value of the last call.
func (b *PortStatusApplyConfiguration) WithVifType(value string) *PortStatusApplyConfiguration {
	b.VifType = &value
	return b
}
