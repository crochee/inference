/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	termv1 "cluster/api/term/v1"
)

// PortApplyConfiguration represents a declarative configuration of the Port type for use
// with apply.
type PortApplyConfiguration struct {
	NetworkID      *string           `json:"network_id,omitempty"`
	FixedIPs       []*termv1.FixedIP `json:"fixed_ips,omitempty"`
	SecurityGroups []string          `json:"security_groups,omitempty"`
}

// PortApplyConfiguration constructs a declarative configuration of the Port type for use with
// apply.
func Port() *PortApplyConfiguration {
	return &PortApplyConfiguration{}
}

// WithNetworkID sets the NetworkID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkID field is set to the value of the last call.
func (b *PortApplyConfiguration) WithNetworkID(value string) *PortApplyConfiguration {
	b.NetworkID = &value
	return b
}

// WithFixedIPs adds the given value to the FixedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FixedIPs field.
func (b *PortApplyConfiguration) WithFixedIPs(values ...**termv1.FixedIP) *PortApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFixedIPs")
		}
		b.FixedIPs = append(b.FixedIPs, *values[i])
	}
	return b
}

// WithSecurityGroups adds the given value to the SecurityGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecurityGroups field.
func (b *PortApplyConfiguration) WithSecurityGroups(values ...string) *PortApplyConfiguration {
	for i := range values {
		b.SecurityGroups = append(b.SecurityGroups, values[i])
	}
	return b
}
